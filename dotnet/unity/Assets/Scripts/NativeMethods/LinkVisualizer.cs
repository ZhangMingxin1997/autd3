// This file is autogenerated
using System;
using System.Runtime.InteropServices;

#if UNITY_2020_2_OR_NEWER
#nullable enable
#endif

namespace AUTD3Sharp
{
    namespace NativeMethods
    {
        internal static class LinkVisualizer
        {
            private const string DLL = "autd3capi_link_visualizer";

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PlotRangePtr AUTDLinkVisualizerPlotRange(float xMin, float xMax, float yMin, float yMax, float zMin, float zMax, float resolution);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern uint AUTDLinkVisualizerPhasesOf(LinkPtr visualizer, Backend backend, Directivity directivity, uint idx, float[]? buf);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern uint AUTDLinkVisualizerDutiesOf(LinkPtr visualizer, Backend backend, Directivity directivity, uint idx, float[]? buf);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern uint AUTDLinkVisualizerModulationRaw(LinkPtr visualizer, Backend backend, Directivity directivity, float[]? buf);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern uint AUTDLinkVisualizerModulation(LinkPtr visualizer, Backend backend, Directivity directivity, float[]? buf);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern void AUTDLinkVisualizerCalcFieldOf(LinkPtr visualizer, Backend backend, Directivity directivity, float[]? points, uint pointsLen, GeometryPtr geometry, uint idx, float[]? buf);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern int AUTDLinkVisualizerPlotFieldOf(LinkPtr visualizer, Backend backend, Directivity directivity, ConfigPtr config, PlotRangePtr range, GeometryPtr geometry, uint idx, byte[] err);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern int AUTDLinkVisualizerPlotPhaseOf(LinkPtr visualizer, Backend backend, Directivity directivity, ConfigPtr config, GeometryPtr geometry, uint idx, byte[] err);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern int AUTDLinkVisualizerPlotModulationRaw(LinkPtr visualizer, Backend backend, Directivity directivity, ConfigPtr config, byte[] err);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern int AUTDLinkVisualizerPlotModulation(LinkPtr visualizer, Backend backend, Directivity directivity, ConfigPtr config, byte[] err);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern LinkBuilderPtr AUTDLinkVisualizerSphereNull([MarshalAs(UnmanagedType.U1)] bool useGpu, int gpuIdx);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern LinkBuilderPtr AUTDLinkVisualizerT4010A1Null([MarshalAs(UnmanagedType.U1)] bool useGpu, int gpuIdx);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern NullPlotConfigPtr AUTDLinkVisualizerNullPlotConfigDefault();

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern LinkBuilderPtr AUTDLinkVisualizerSpherePlotters([MarshalAs(UnmanagedType.U1)] bool useGpu, int gpuIdx);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern LinkBuilderPtr AUTDLinkVisualizerT4010A1Plotters([MarshalAs(UnmanagedType.U1)] bool useGpu, int gpuIdx);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PlotConfigPtr AUTDLinkVisualizerPlotConfigDefault();

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PlotConfigPtr AUTDLinkVisualizerPlotConfigWithFigSize(PlotConfigPtr config, uint width, uint height);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PlotConfigPtr AUTDLinkVisualizerPlotConfigWithCBarSize(PlotConfigPtr config, float cbarSize);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PlotConfigPtr AUTDLinkVisualizerPlotConfigWithFontSize(PlotConfigPtr config, uint fontSize);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PlotConfigPtr AUTDLinkVisualizerPlotConfigWithLabelAreaSize(PlotConfigPtr config, uint labelAreaSize);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PlotConfigPtr AUTDLinkVisualizerPlotConfigWithMargin(PlotConfigPtr config, uint margin);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PlotConfigPtr AUTDLinkVisualizerPlotConfigWithTicksStep(PlotConfigPtr config, float ticksStep);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PlotConfigPtr AUTDLinkVisualizerPlotConfigWithCMap(PlotConfigPtr config, CMap cmap);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PlotConfigPtr AUTDLinkVisualizerPlotConfigWithFName(PlotConfigPtr config, string fname, byte[] err);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern LinkBuilderPtr AUTDLinkVisualizerSpherePython([MarshalAs(UnmanagedType.U1)] bool useGpu, int gpuIdx);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern LinkBuilderPtr AUTDLinkVisualizerT4010A1Python([MarshalAs(UnmanagedType.U1)] bool useGpu, int gpuIdx);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PyPlotConfigPtr AUTDLinkVisualizerPyPlotConfigDefault();

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PyPlotConfigPtr AUTDLinkVisualizerPyPlotConfigWithFigSize(PyPlotConfigPtr config, int width, int height);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PyPlotConfigPtr AUTDLinkVisualizerPyPlotConfigWithDPI(PyPlotConfigPtr config, int dpi);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PyPlotConfigPtr AUTDLinkVisualizerPyPlotConfigWithCBarPosition(PyPlotConfigPtr config, string cbarPosition, byte[] err);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PyPlotConfigPtr AUTDLinkVisualizerPyPlotConfigWithCBarSize(PyPlotConfigPtr config, string cbarSize, byte[] err);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PyPlotConfigPtr AUTDLinkVisualizerPyPlotConfigWithCBarPad(PyPlotConfigPtr config, string cbarPad, byte[] err);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PyPlotConfigPtr AUTDLinkVisualizerPyPlotConfigWithFontSize(PyPlotConfigPtr config, int fontsize);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PyPlotConfigPtr AUTDLinkVisualizerPyPlotConfigWithTicksStep(PyPlotConfigPtr config, float ticksStep);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PyPlotConfigPtr AUTDLinkVisualizerPyPlotConfigWithCMap(PyPlotConfigPtr config, string cmap, byte[] err);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PyPlotConfigPtr AUTDLinkVisualizerPyPlotConfigWithShow(PyPlotConfigPtr config, [MarshalAs(UnmanagedType.U1)] bool show);

            [DllImport(DLL, CallingConvention = CallingConvention.Cdecl)] public unsafe static extern PyPlotConfigPtr AUTDLinkVisualizerPyPlotConfigWithFName(PyPlotConfigPtr config, string fname, byte[] err);
        }
    }

    public enum Backend : byte
    {
        Plotters = 0,
        Python = 1,
        Null = 2,
    }

    public enum Directivity : byte
    {
        Sphere = 0,
        T4010A1 = 1,
    }

    public enum CMap : byte
    {
        Jet = 0,
        Viridis = 1,
        Magma = 2,
        Inferno = 3,
        Plasma = 4,
        Cividis = 5,
        Turbo = 6,
        Circle = 7,
        Bluered = 8,
        Breeze = 9,
        Mist = 10,
        Earth = 11,
        Hell = 12,
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct ConfigPtr
    {
        public IntPtr _0;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct PlotRangePtr
    {
        public IntPtr _0;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct NullPlotConfigPtr
    {
        public IntPtr _0;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct PlotConfigPtr
    {
        public IntPtr _0;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct PyPlotConfigPtr
    {
        public IntPtr _0;
    }

}

#if UNITY_2020_2_OR_NEWER
#nullable disable
#endif


