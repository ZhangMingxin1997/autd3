cmake_minimum_required(VERSION 3.21)

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
  message(FATAL_ERROR "In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there. You may need to remove CMakeCache.txt. ")
endif()

project(autd3)

set(VERSION_MAJOR 2 CACHE STRING "Project major version number.")
set(VERSION_MINOR 4 CACHE STRING "Project minor version number.")
set(VERSION_PATCH 5 CACHE STRING "Project patch version number.")
mark_as_advanced(VERSION_MAJOR VERSION_MINOR VERSION_PATCH)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

option(BUILD_ALL "BUILD_ALL" OFF)
option(BUILD_DOC "BUILD_DOC" OFF)

option(BUILD_GAIN_HOLO "BUILD_GAIN_HOLO" ON)
option(BUILD_BACKEND_CUDA "BUILD_BACKEND_CUDA" OFF)
option(BUILD_BACKEND_ARRAYFIRE "BUILD_BACKEND_ARRAYFIRE" OFF)
option(BUILD_BACKEND_BLAS "BUILD_BACKEND_BLAS" OFF)
set(BLAS_LIB_DIR CACHE PATH "BLAS library directory")
set(BLAS_DEPEND_LIB_DIR CACHE PATH "Additional library directory for BLAS")
set(BLAS_INCLUDE_DIR CACHE PATH "BLAS include directory")
option(USE_MKL "USE_MKL" OFF)

option(BUILD_MODULATION_AUDIO_FILE "BUILD_MODULATION_AUDIO_FILE" OFF)

option(BUILD_LINK_SOEM "BUILD_LINK_SOEM" ON)
option(BUILD_LINK_TWINCAT "BUILD_LINK_TWINCAT" OFF)
option(BUILD_LINK_REMOTE_TWINCAT "BUILD_LINK_REMOTE_TWINCAT" OFF)
option(BUILD_LINK_BUNDLE "BUILD_LINK_BUNDLE" OFF)
option(BUILD_LINK_DEBUG "BUILD_LINK_DEBUG" ON)
option(BUILD_LINK_SIMULATOR "BUILD_LINK_SIMULATOR" OFF)

option(BUILD_GEOMETRY_VIEWER "BUILD_GEOMETRY_VIEWER" OFF)
option(BUILD_SIMULATOR "BUILD_SIMULATOR" OFF)

option(BUILD_EXAMPLES "BUILD_EXAMPLES" ON)
option(DISABLE_EXAMPLES "DISABLE_EXAMPLES" OFF)

option(BUILD_CAPI "BUILD_CAPI" OFF)

option(ENABLE_LINT "ENABLE_LINT" OFF)

option(EXPORT_AUTD_SIMULATOR "EXPORT_AUTD_SIMULATOR" OFF)

option(BUILD_TEST "BUILD_TEST" OFF)

option(USE_METER "Use meter instead of millimeter" OFF)
option(USE_LEFT_HANDED "Use left-handed coordinate system instead of right-handed" OFF)

if(BUILD_ALL)
  set(BUILD_GAIN_HOLO ON)
  set(BUILD_MODULATION_AUDIO_FILE ON)
  set(BUILD_LINK_SOEM ON)
  set(BUILD_LINK_TWINCAT ON)
  set(BUILD_LINK_REMOTE_TWINCAT ON)
  set(BUILD_LINK_BUNDLE ON)
  set(BUILD_LINK_DEBUG ON)
  set(BUILD_LINK_SIMULATOR ON)
  set(BUILD_GEOMETRY_VIEWER ON)
  set(BUILD_SIMULATOR ON)
  set(BUILD_EXAMPLES ON)
  set(BUILD_CAPI ON)
  if(APPLE)
    set(BUILD_GEOMETRY_VIEWER OFF)
    set(BUILD_SIMULATOR OFF)
  endif()
  if(DEFINED BUILD_TARGET)
    if(${BUILD_TARGET} STREQUAL ARM32 OR ${BUILD_TARGET} STREQUAL ARM)
      set(BUILD_GEOMETRY_VIEWER OFF)
      set(BUILD_SIMULATOR OFF)
    endif()
    if(${BUILD_TARGET} STREQUAL ARM64 OR ${BUILD_TARGET} STREQUAL AARCH64)
      set(BUILD_GEOMETRY_VIEWER OFF)
      set(BUILD_SIMULATOR OFF)
    endif()
  endif()
endif()

if(DISABLE_EXAMPLES)
  set(BUILD_EXAMPLES OFF)
endif()

if(WIN32)
  set(OS win32)
  include(cmakes/win_vs.cmake)
elseif(APPLE)
  set(OS macosx)
  include(cmakes/mac.cmake)
else()
  set(OS linux)
  if(DEFINED BUILD_TARGET)
    if(${BUILD_TARGET} STREQUAL ARM32 OR ${BUILD_TARGET} STREQUAL ARM)
      include(cmakes/arm32.cmake)
    elseif(${BUILD_TARGET} STREQUAL ARM64 OR ${BUILD_TARGET} STREQUAL AARCH64)
      include(cmakes/arm64.cmake)
    elseif(${BUILD_TARGET} STREQUAL AMD64 OR ${BUILD_TARGET} STREQUAL x86_64 OR ${BUILD_TARGET} STREQUAL x64)
      include(cmakes/linux.cmake)
    endif()
  else()
    include(cmakes/linux.cmake)
  endif()
endif()

if(NOT BUILD_SHARED_LIBS)
  set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
endif()

if(BUILD_DOC)
  find_package(Doxygen)

  if(DOXYGEN_FOUND)
    message(STATUS "Doxygen found.")
    add_subdirectory(doc/doxygen)
  else()
    message(STATUS "Doxygen is needed to build the documentation. Skip building doc...")
  endif()
endif()

find_package(Git)
if(NOT Git_FOUND)
  message(WARNING "Git not found.")
endif()

if(ENABLE_LINT)
  if(Git_FOUND)
    execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/cpplint)
  endif()

  file(GLOB_RECURSE lint_files src/*.cpp src/*.hpp include/*.hpp capi/*.cpp capi/*.hpp examples/*.cpp examples/*.hpp tests/*.hpp tests/*.cpp)
  ADD_CUSTOM_TARGET(cpplint
    python
    ${PROJECT_SOURCE_DIR}/3rdparty/cpplint/cpplint.py
    --filter=-runtime/references,-build/c++11,-whitespace/comments,-readability/braces,-build/include_subdir,-build/include_order,-build/include_what_you_use
    --linelength=1000
    ${lint_files}
  )
endif()

if(Git_FOUND)
  execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/eigen)
endif()
set(EIGEN_PATH ${PROJECT_SOURCE_DIR}/3rdparty/eigen)

if(Git_FOUND)
  execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/spdlog)
endif()
set(SPDLOG_INCLUDE_PATH ${PROJECT_SOURCE_DIR}/3rdparty/spdlog/include)

if(BUILD_GEOMETRY_VIEWER OR BUILD_SIMULATOR)
  if(MSVC)
    find_package(Vulkan)
    if(NOT ${Vulkan_FOUND})
      execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/Vulkan-Headers)
      set(Vulkan_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/3rdparty/Vulkan-Headers/include)
      set(Vulkan_LIBRARIES ${PROJECT_SOURCE_DIR}/src/extra/lib/vulkan-1.lib)
    endif()
  elseif(APPLE)
    find_package(Vulkan REQUIRED)
  else()
    find_package(Vulkan)
    if(NOT ${Vulkan_FOUND})
      execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/Vulkan-Headers)
      set(Vulkan_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/3rdparty/Vulkan-Headers/include)
      set(Vulkan_LIBRARIES ${PROJECT_SOURCE_DIR}/src/extra/lib/libvulkan.so)
    endif()
  endif()
  execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/json)
  execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/imgui)
  execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/glm)
  execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/glfw)
  execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/stb)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/json)
  set(GLFW_BUILD_EXAMPLES OFF)
  set(GLFW_BUILD_DOCS OFF)
  set(GLFW_INSTALL OFF)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/glfw)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/glm)
  set(STB_INCLUDE_PATH ${PROJECT_SOURCE_DIR}/3rdparty/stb)
  set(IMGUI_PATH ${PROJECT_SOURCE_DIR}/3rdparty/imgui)
  set_target_properties(glfw PROPERTIES FOLDER "3rdparty")
  set_target_properties(update_mappings PROPERTIES FOLDER "3rdparty")
  add_subdirectory(src/extra/imgui_vulkan)
  add_subdirectory(src/extra/helper)
endif()

if(BUILD_GEOMETRY_VIEWER)
  execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init -- ${PROJECT_SOURCE_DIR}/3rdparty/fx-gltf)
  set(FX_GLTF_BUILD_TESTS OFF)
  set(FX_GLTF_INSTALL OFF)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/fx-gltf)
  add_subdirectory(src/extra/geometry_viewer)
endif()

if(BUILD_SIMULATOR)
  execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init -- ${PROJECT_SOURCE_DIR}/3rdparty/tinycolormap)
  execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init -- ${PROJECT_SOURCE_DIR}/3rdparty/smem)
  set(BUILD_LINK_SIMULATOR ON)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/tinycolormap)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/smem)
  add_subdirectory(src/extra/simulator)
endif()

add_library(autd3_common INTERFACE)
target_include_directories(autd3_common INTERFACE ${PROJECT_SOURCE_DIR}/include ${EIGEN_PATH} ${SPDLOG_INCLUDE_PATH})
target_compile_definitions(autd3_common INTERFACE EIGEN_MPL2_ONLY)
if(USE_METER)
  target_compile_definitions(autd3_common INTERFACE AUTD3_USE_METER)
endif()
if(USE_LEFT_HANDED)
  target_compile_definitions(autd3_common INTERFACE AUTD3_USE_LEFT_HANDED)
endif()

if(WIN32)
  if(MSVC)
    target_compile_options(autd3_common INTERFACE /bigobj /wd4819 /Zc:__cplusplus)
  endif()
elseif(APPLE)
  target_compile_options(autd3_common INTERFACE -Wall -Wextra -Wno-unknown-pragmas)
else()
  target_compile_options(autd3_common INTERFACE -Wall -Wno-unknown-pragmas)
endif()

add_subdirectory(src)

if(BUILD_GAIN_HOLO)
  add_subdirectory(src/gain/holo)
endif()

if(BUILD_MODULATION_AUDIO_FILE)
  add_subdirectory(src/modulation/audio_file)
endif()

if(BUILD_LINK_SOEM)
  if(Git_FOUND)
    execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/SOEM)
  endif()
  set(SOEM_PATH ${PROJECT_SOURCE_DIR}/3rdparty/SOEM)

  add_subdirectory(src/link/soem)
endif()

if(BUILD_LINK_TWINCAT)
  add_subdirectory(src/link/twincat)
endif()

if(BUILD_LINK_REMOTE_TWINCAT)
  if(Git_FOUND)
    execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} submodule update --init --recursive -- ${PROJECT_SOURCE_DIR}/3rdparty/ADS)
  endif()

  set(ADS_PATH ${PROJECT_SOURCE_DIR}/3rdparty/ADS)
  add_subdirectory(src/link/remote_twincat)
endif()

if(BUILD_LINK_SIMULATOR)
  add_subdirectory(src/link/simulator)
endif()

if(BUILD_LINK_BUNDLE)
  add_subdirectory(src/link/bundle)
endif()

if(BUILD_LINK_DEBUG)
  add_subdirectory(src/link/debug)
endif()

if(BUILD_EXAMPLES)
  add_subdirectory(examples)
endif()

if(BUILD_TEST)
  cmake_policy(SET CMP0077 NEW)
  if(POLICY CMP0135)
    cmake_policy(SET CMP0135 NEW)
  endif()
  include(${PROJECT_SOURCE_DIR}/cmakes/gtest.cmake)
  # set(gtest_disable_pthreads ON)
  add_subdirectory(tests)
endif()

if(BUILD_CAPI)
  add_subdirectory(capi)
endif()

if(EXPORT_AUTD_SIMULATOR)
  add_subdirectory(dist/simulator)
endif()
