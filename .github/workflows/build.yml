name: build

on:
  push:
    branches:
      - 'develop'
  pull_request:
    types: [opened, reopened, review_requested]

env:
  CARGO_INCREMENTAL: 0

jobs:
  check-src:
    runs-on: ubuntu-latest
    name: check if src files changed
    outputs:
      status: ${{ steps.changed-files.outputs.modified_files }}
    steps:
      - uses: actions/checkout@v3
      - uses: tj-actions/changed-files@v37
        id: changed-files
        with:
          files: |
            .github/actions/setup-build/action.yml
            .github/workflows/build.yml
            src/**/*.rs
            src/*.toml
            src/**/*.toml
            src/**/*.proto

  build-src:
    needs: check-src
    if: needs.check-src.outputs.status
    name: build-src-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: ${{ matrix.os }}
          cuda: true
          shaderc: true
        
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src -> target'

      - name: Test src on ${{ matrix.os }}
        if: matrix.os == 'windows-latest'
        run: |
          python build.py build --all

  build-linux-arm32-src:
    needs: check-src
    if: needs.check-src.outputs.status
    name: build-src-linux-arm32
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: ubuntu-latest
          arch: 'arm32'
          cuda: false
          shaderc: false

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src -> target'

      - name: Test src on ${{ matrix.os }}
        run: |
          python build.py build --all --arch arm32

  build-linux-aarch64-src:
    needs: check-src
    if: needs.check-src.outputs.status
    name: build-src-linux-aarch64
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: ubuntu-latest
          arch: 'aarch64'
          cuda: false
          shaderc: false

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src -> target'

      - name: Test src on ${{ matrix.os }}
        run: |
          python build.py build --all --arch aarch64

  lint-src:
    needs: check-src
    if: needs.check-src.outputs.status
    name: lint-src
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: ubuntu-latest
          cuda: true
          shaderc: true

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src -> target'

      - name: lint src
        run: |
          python build.py lint

  check-server:
    runs-on: ubuntu-latest
    name: check if server files changed
    outputs:
      status: ${{ steps.changed-files.outputs.modified_files }}
    steps:
      - uses: actions/checkout@v3
      - uses: tj-actions/changed-files@v37
        id: changed-files
        with:
          files: |
            server/**/*.rs
            server/**/*.toml
            server/**/*.ts
            server/**/*.svelte
            server/package.json

  build-server:
    needs: check-server
    if: needs.check-server.outputs.status
    name: build-server
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: ${{ matrix.os }}
          cuda: false
          shaderc: true

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './server/src-tauri -> target'

      - name: install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
  
      - name: install frontend dependencies
        run: |
          cd server 
          npm install
  
      - name: build
        if: matrix.os == 'macos-latest'
        run: |
          cd server
          cd simulator
          cargo build --release --target=x86_64-apple-darwin
          cargo build --release --target=aarch64-apple-darwin
          cd ..
          cd SOEMAUTDServer
          cargo build --release --target=x86_64-apple-darwin
          cargo build --release --target=aarch64-apple-darwin
          cd ..
          cd LightweightTwinCATAUTDServer
          cargo build --release --target=x86_64-apple-darwin
          cargo build --release --target=aarch64-apple-darwin
          cd ..
          npm run tauri build -- --target universal-apple-darwin
      - name: build
        if: matrix.os != 'macos-latest'
        run: |
          cd server
          cd simulator
          cargo build --release
          cd ..
          cd SOEMAUTDServer
          cargo build --release
          cd ..
          cd LightweightTwinCATAUTDServer
          cargo build --release
          cd ..
          npm run tauri build
