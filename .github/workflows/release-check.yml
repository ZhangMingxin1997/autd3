name: release-check

on:
  push:
    tags-ignore:
      - v*
    branches:
      - 'release'

jobs:
  build:
    name: build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v3
    - name: setup-msbuild
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1
    - uses: Jimver/cuda-toolkit@v0.2.8
      if: matrix.os != 'macos-latest'
      id: cuda-toolkit
      with:
        cuda: '11.7.0'
    - name: build for Windows x64
      if: matrix.os == 'windows-latest'
      run: |
        cmake -G "Visual Studio 17 2022" -A x64 -B "build" -DBUILD_ALL=ON -DBUILD_BACKEND_CUDA=ON -DEXPORT_AUTD_SIMULATOR=ON
        cd build
        msbuild autd3.sln /t:build /p:Configuration=Release
    - name: install compile tools
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install g++-arm-linux-gnueabihf g++-aarch64-linux-gnu mesa-common-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev -y
      shell: bash
    - name: build for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ALL=ON -DBUILD_BACKEND_CUDA=ON
        make -j8
      shell: bash
      env:
        CC: gcc-10
        CXX: g++-10
    - name: build for Linux ARM32
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p build_arm32 && cd build_arm32
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TARGET=ARM32 -DBUILD_ALL=ON
        make -j8
      shell: bash
      env:
        CC: gcc-10
        CXX: g++-10
    - name: build for Linux ARM64
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p build_arm64 && cd build_arm64
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TARGET=ARM64 -DBUILD_ALL=ON
        make -j8
      shell: bash
      env:
        CC: gcc-10
        CXX: g++-10
    - name: build for macOS
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ALL=ON -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
        make -j8

  lint:
    name: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps: 
    - uses: actions/checkout@v3
    - name: install compile tools
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install mesa-common-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev -y
      shell: bash
    - name: lint
      run: |
        mkdir -p build && cd build
        cmake .. -DBUILD_ALL=ON -DENABLE_LINT=ON
        make cpplint

  build-cs:
    name: build cs in windows-latest
    runs-on: windows-latest
    steps: 
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: build
      run: |
        mkdir build
        cd build
        cmake .. -DBUILD_ALL=ON
        cmake --build . --parallel 8 --config Release
        cd ..
        foreach($dll in Get-ChildItem -Path build/bin/Release | Where {$_.extension -like ".dll"}){Copy-Item -Path $dll -Destination cs/src/native/windows/x64}
        cd cs/src
        dotnet clean
        dotnet build -c:Release /p:Platform=x64
        cd ..
        dotnet nuget add source $pwd/src/bin/x64/Release -n autd3shapr_local
        cd example
        dotnet clean example.sln
        dotnet nuget locals global-packages --clear
        dotnet build example.sln -c:Release /p:Platform=x64

  build-rs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Checkout submodules
      run: git submodule update --init --force --recursive -- rust/autd3-link-soem/3rdparty/SOEM
    - name: publish
      run: |
        cd rust
        cd autd3-driver
        cargo publish --dry-run
        cd ..
        cd autd3-core
        cargo publish --dry-run
        cd ..
        cd autd3-traits
        cargo publish --dry-run
        cd ..
        cd autd3
        cargo publish --dry-run
        cd ..
        cd autd3-link-soem
        cargo publish --dry-run
        cd ..
        cd autd3-link-twincat
        cargo publish --dry-run
        cd ..
        cd autd3-link-simulator
        cargo publish --dry-run
        cd ..
        cd autd3-gain-holo
        cargo publish --dry-run
