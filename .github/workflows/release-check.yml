name: release-check

on:
  push:
    tags-ignore:
      - v*
    branches:
      - 'release'

jobs:
  publish_win:
    name: Release Check on Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - uses: okazunori2013/cuda-toolkit@v0.3.2
        id: cuda-toolkit
        with:
          cuda: '11.8.0'
      - name: Build project x64
        run: |
          cmake -G "Visual Studio 17 2022" -A x64 -B "build" -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_BACKEND_CUDA=ON -DEXPORT_AUTD_SIMULATOR=ON -DDISABLE_EXAMPLES=ON -DEXPORT_SOEM_AUTD_SERVER=ON
          cd build
          cmake --build . --parallel 8 --config Release
          mkdir publish
          mkdir publish/lib
          mkdir publish/lib/wpcap
          mkdir publish/bin
          mkdir publish/simulator
          mkdir publish/gui-controller
          mkdir publish/SOEMAUTDServer
          cd ..
          foreach($dll in Get-ChildItem -Path build/bin/Release | Where {$_.extension -like ".dll"}){Copy-Item -Path $dll -Destination cs/src/native/windows/x64}
          cd cs/src
          dotnet clean
          dotnet build -c:Release
          cd ../..
          dotnet nuget add source $pwd/cs/src/bin/Release -n autd3sharp_local
          cd dist/GUI
          dotnet publish -c:Release -r win-x64 --self-contained false -o bin
          copy AUTD3-GUI-Controller/Strings -Recurse bin/
          cd ../..
          copy build/lib/Release/*.lib build/publish/lib
          copy 3rdparty/SOEM/oshw/win32/wpcap/Lib/x64/*.lib build/publish/lib/wpcap
          copy build/bin/Release/*.dll build/publish/bin
          copy dist/GUI/bin -Recurse publish/gui-controller/bin
          copy dist/GUI/AUTD3-GUI-Controller.exe publish/gui-controller
          copy build/dist/simulator/Release/*.exe build/publish/simulator
          copy build/dist/SOEMAUTDServer/Release/*.exe build/publish/SOEMAUTDServer
          copy dist/simulator/settings.json build/publish/simulator
          Remove-Item -Recurse -Force dist/TwinCATAUTDServer/src
          Compress-Archive -Path LICENSE, NOTICE, dist/TwinCATAUTDServer, dist/firmware, include, build/publish/lib, build/publish/bin, build/publish/simulator, build/publish/SOEMAUTDServer, publish/gui-controller -DestinationPath assets_x64.zip
      - name: Build project x64 for Unity
        run: |
          cmake -G "Visual Studio 17 2022" -A x64 -B "build_unity" -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_BACKEND_CUDA=ON -DEXPORT_AUTD_SIMULATOR=ON -DDISABLE_EXAMPLES=ON -DUSE_METER=ON -DUSE_LEFT_HANDED=ON
          cd build_unity
          cmake --build . --parallel 8 --config Release
          cd ..
          foreach($dll in Get-ChildItem -Path build_unity/bin/Release | Where {$_.extension -like ".dll"}){Copy-Item -Path $dll -Destination cs/unity/Assets/AUTD/Plugins/x86_64}
      - name: Replace latest scripts
        run: |
          foreach($src in Get-ChildItem -Path ./cs/src | Where {$_.extension -like ".cs"}){Copy-Item -Path $src -Destination ./cs/unity/Assets/AUTD/Scripts}
          foreach($src in Get-ChildItem -Path ./cs/src/NativeMethods | Where {$_.extension -like ".cs"}){Copy-Item -Path $src -Destination ./cs/unity/Assets/AUTD/Scripts/NativeMethods}
          Copy-Item -Path ./cs/src/LICENSE.txt -Destination ./cs/unity/Assets/AUTD/
          copy build/dist/simulator/Release/*.exe ./cs/unity/Assets/Editor
      - name: Enumerate Assets
        run: |
          Get-ChildItem -Recurse -Filter '*.meta' -Name | ForEach-Object {$_ -replace '[\\]', '/'} >> metaList
        working-directory: ./cs/unity
      - uses: pCYSl5EDgo/create-unitypackage@master
        with:
          package-path: 'autd3.unitypackage'
          include-files: ./cs/unity/metaList
          project-folder: ./cs/unity

      - name: Build project arm
        run: |
          cmake -G "Visual Studio 17 2022" -A ARM64 -B "build_arm" -DBUILD_TARGET=ARM -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_BACKEND_CUDA=OFF -DEXPORT_AUTD_SIMULATOR=OFF -DDISABLE_EXAMPLES=ON -DEXPORT_SOEM_AUTD_SERVER=ON
          cd build_arm
          cmake --build . --parallel 8 --config Release
          mkdir publish
          mkdir publish/lib
          mkdir publish/lib/wpcap
          mkdir publish/bin
          mkdir publish/SOEMAUTDServer
          cd ..
          copy build_arm/lib/Release/*.lib build_arm/publish/lib
          copy src/link/soem/Lib/ARM64/*.lib build_arm/publish/lib/wpcap
          copy build_arm/bin/Release/*.dll build_arm/publish/bin
          copy build_arm/dist/SOEMAUTDServer/Release/*.exe build_arm/publish/SOEMAUTDServer
          Compress-Archive -Path LICENSE, NOTICE, include, build_arm/publish/lib, build_arm/publish/bin, build_arm/publish/SOEMAUTDServer -DestinationPath assets_arm.zip
   
  publish_linux:
    name: Release Check on Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: install compile tools
        run: |
          sudo apt update
          sudo apt install g++-arm-linux-gnueabihf g++-aarch64-linux-gnu mesa-common-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev -y
        shell: bash
      - uses: okazunori2013/cuda-toolkit@v0.3.2
        id: cuda-toolkit
        with:
          cuda: '11.8.0'
      - name: Build project x64
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_BACKEND_CUDA=ON -DDISABLE_EXAMPLES=ON
          make -j8
          cd ..
          mkdir -p lib
          mkdir -p bin
          cp -f build/lib/*.a lib
          cp -f build/bin/Release/*.so bin
          tar -zcvf assets_x64.tar.gz include lib bin LICENSE NOTICE 
        shell: bash
        env:
          CC: gcc-10
          CXX: g++-10
      - name: Build project arm32
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TARGET=ARM32 -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DDISABLE_EXAMPLES=ON -DBUILD_BACKEND_CUDA=OFF
          make -j8
          cd ..
          mkdir -p lib
          mkdir -p bin
          cp -f build/lib/*.a lib
          cp -f build/bin/Release/*.so bin
          tar -zcvf assets_arm32.tar.gz include lib bin LICENSE NOTICE
        shell: bash
        env:
          CC: gcc-10
          CXX: g++-10
      - name: Build project arm64
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TARGET=ARM64 -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DDISABLE_EXAMPLES=ON -DBUILD_BACKEND_CUDA=OFF
          make -j8
          cd ..
          mkdir -p lib
          mkdir -p bin
          cp -f build/lib/*.a lib
          cp -f build/bin/Release/*.so bin
          tar -zcvf assets_arm64.tar.gz include lib bin LICENSE NOTICE
        shell: bash
        env:
          CC: gcc-10
          CXX: g++-10
  
  publish_mac:
    name: Release Check on macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build project
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_BACKEND_CUDA=OFF -DDISABLE_EXAMPLES=ON -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          make -j8
          cd ..
          mkdir -p lib
          mkdir -p bin
          cp -f build/lib/*.a lib
          cp -f build/bin/Release/*.dylib bin
          tar -zcvf assets.tar.gz include lib bin LICENSE NOTICE

  lint:
    name: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps: 
    - uses: actions/checkout@v3
    - name: install compile tools
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install mesa-common-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev -y
      shell: bash
    - name: lint
      run: |
        mkdir -p build && cd build
        cmake .. -DBUILD_ALL=ON -DENABLE_LINT=ON
        make cpplint

  build-cs:
    name: build cs in windows-latest
    runs-on: windows-latest
    steps: 
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: build
      run: |
        mkdir build
        cd build
        cmake .. -DBUILD_ALL=ON
        cmake --build . --parallel 8 --config Release
        cd ..
        foreach($dll in Get-ChildItem -Path build/bin/Release | Where {$_.extension -like ".dll"}){Copy-Item -Path $dll -Destination cs/src/native/windows/x64}
        cd cs/src
        dotnet clean
        dotnet build -c:Release
        cd ..
        dotnet nuget add source $pwd/src/bin/Release -n autd3sharp_local
        cd example
        dotnet clean example.sln
        dotnet nuget locals global-packages --clear
        dotnet build example.sln -c:Release
