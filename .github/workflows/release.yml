on:
  push:
    tags:
    - 'v*'

name: Upload Release Asset

jobs:   
  release:
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
        
  publish_win:
    needs: [release]
    name: Upload Release Asset Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        uses: actions/github-script@0.5.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-win';
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1
      - uses: Jimver/cuda-toolkit@v0.2.6
        id: cuda-toolkit
        with:
          cuda: '11.7.0'
      - name: Build project x64
        run: |
          cmake -G "Visual Studio 17 2022" -A x64 -B "build" -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_BACKEND_CUDA=ON
          cd build
          msbuild autd3.sln /t:build /p:Configuration=Release -maxcpucount
          mkdir publish
          mkdir publish/lib
          mkdir publish/lib/wpcap
          mkdir publish/bin
          cd ..
          copy build/lib/Release/*.lib build/publish/lib
          copy 3rdparty/SOEM/oshw/win32/wpcap/Lib/x64/*.lib build/publish/lib/wpcap
          copy build/bin/Release/*.dll build/publish/bin
          Compress-Archive -Path LICENSE, NOTICE, dist/AUTDServer, dist/firmware, include, build/publish/lib, build/publish/bin -DestinationPath assets_x64.zip
      - name: Build project x86
        run: |
          cmake -G "Visual Studio 17 2022" -A Win32 -B "build_x86" -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_BACKEND_CUDA=OFF
          cd build_x86
          msbuild autd3.sln /t:build /p:Configuration=Release -maxcpucount
          mkdir publish
          mkdir publish/lib
          mkdir publish/lib/wpcap
          mkdir publish/bin
          cd ..
          copy build_x86/lib/Release/*.lib build_x86/publish/lib
          copy 3rdparty/SOEM/oshw/win32/wpcap/Lib/*.lib build/publish/lib/wpcap
          copy build_x86/bin/Release/*.dll build_x86/publish/bin
          Compress-Archive -Path LICENSE, NOTICE, dist/AUTDServer, dist/firmware, include, build_x86/publish/lib, build_x86/publish/bin -DestinationPath assets_x86.zip
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          $value=cat release_url/release_url.txt
          echo "::set-output name=upload_url::$value"
      - name: Upload Release Asset
        id: upload-release-asset-win64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_x64.zip
          asset_name: ${{ steps.get_version.outputs.result }}-x64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset
        id: upload-release-asset-win32
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_x86.zip
          asset_name: ${{ steps.get_version.outputs.result }}-x86.zip
          asset_content_type: application/zip
  
  publish_linux:
    needs: [release]
    name: Upload Release Asset Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        uses: actions/github-script@0.5.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-linux';
      - name: install cross compile tools
        run: |
          sudo apt update
          sudo apt install g++-arm-linux-gnueabihf g++-aarch64-linux-gnu -y
        shell: bash
      - uses: Jimver/cuda-toolkit@v0.2.6
        id: cuda-toolkit
        with:
          cuda: '11.7.0'
      - name: Build project x64
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_BACKEND_CUDA=ON
          make -j8
          cd ..
          mkdir -p lib
          mkdir -p bin
          cp -f build/lib/*.a lib
          cp -f build/bin/Release/*.so bin
          cp -rf dist/firmware firmware/
          tar -zcvf assets_x64.tar.gz firmware include lib bin LICENSE NOTICE 
        shell: bash
        env:
          CC: gcc-10
          CXX: g++-10
      - name: Build project arm32
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TARGET=ARM32 -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_BACKEND_CUDA=OFF
          make -j8
          cd ..
          mkdir -p lib
          mkdir -p bin
          cp -f build/lib/*.a lib
          cp -f build/bin/Release/*.so bin
          cp -rf dist/firmware firmware/
          tar -zcvf assets_arm32.tar.gz firmware include lib bin LICENSE NOTICE
        shell: bash
        env:
          CC: gcc-10
          CXX: g++-10
      - name: Build project arm64
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TARGET=ARM64 -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_BACKEND_CUDA=OFF
          make -j8
          cd ..
          mkdir -p lib
          mkdir -p bin
          cp -f build/lib/*.a lib
          cp -f build/bin/Release/*.so bin
          cp -rf dist/firmware firmware/
          tar -zcvf assets_arm64.tar.gz firmware include lib bin LICENSE NOTICE
        shell: bash
        env:
          CC: gcc-10
          CXX: g++-10
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Upload Release Asset
        id: upload-release-asset-x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_x64.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-x64.tar.gz
          asset_content_type: application/octet-stream
      - name: Upload Release Asset ARM32
        id: upload-release-asset-arm32
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_arm32.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-arm32.tar.gz
          asset_content_type: application/octet-stream
      - name: Upload Release Asset ARM64
        id: upload-release-asset-arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_arm64.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-arm64.tar.gz
          asset_content_type: application/octet-stream
  
  publish_mac:
    needs: [release]
    name: Upload Release Asset macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        uses: actions/github-script@0.5.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-macos-universal.tar.gz';
      - name: Build project
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_BACKEND_CUDA=OFF -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          make -j8
          cd ..
          mkdir -p lib
          mkdir -p bin
          cp -f build/lib/*.a lib
          cp -f build/bin/Release/*.dylib bin
          mv -f dist/firmware firmware/
          tar -zcvf assets.tar.gz firmware include lib bin LICENSE NOTICE
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}
          asset_content_type: application/octet-stream

  publish_unitypackage:
    needs: [publish_win, publish_linux, publish_mac]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d . -f 1,2,3)
      - name: Get package name
        id: get_package_name
        uses: actions/github-script@0.5.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'.unitypackage';
      - name: Download latest binary
        run: | 
          wget https://github.com/shinolab/autd3/releases/download/${{ steps.get_version.outputs.VERSION }}/autd3-${{ steps.get_version.outputs.VERSION }}-linux-x64.tar.gz
          wget https://github.com/shinolab/autd3/releases/download/${{ steps.get_version.outputs.VERSION }}/autd3-${{ steps.get_version.outputs.VERSION }}-macos-universal.tar.gz
          wget https://github.com/shinolab/autd3/releases/download/${{ steps.get_version.outputs.VERSION }}/autd3-${{ steps.get_version.outputs.VERSION }}-win-x64.zip
      - name: Replace latest binary
        run: |
          tar -zxvf autd3-${{ steps.get_version.outputs.VERSION }}-linux-x64.tar.gz
          tar -zxvf autd3-${{ steps.get_version.outputs.VERSION }}-macos-universal.tar.gz
          unzip -o autd3-${{ steps.get_version.outputs.VERSION }}-win-x64.zip
          rm -f ./cs/unity/Assets/AUTD/Plugins/x86_64/*.dll
          rm -f ./cs/unity/Assets/AUTD/Plugins/x86_64/*.so
          rm -f ./cs/unity/Assets/AUTD/Plugins/x86_64/*.dylib
          \cp bin/*.dll ./cs/unity/Assets/AUTD/Plugins/x86_64/
          \cp bin/*.so ./cs/unity/Assets/AUTD/Plugins/x86_64/
          \cp bin/*.dylib ./cs/unity/Assets/AUTD/Plugins/x86_64/
      - name: Replace latest scripts
        run: |
          cp -f ./cs/src/*.cs ./cs/unity/Assets/AUTD/Scripts/
          cp -f ./cs/src/NativeMethods/*.cs ./cs/unity/Assets/AUTD/Scripts/NativeMethods
          cp -f ./cs/src/LICENSE.txt ./cs/unity/Assets/AUTD/
      - name: Enumerate Assets
        run: |
          find . -name '*.meta' >> metaList
        working-directory: ./unity
      - uses: pCYSl5EDgo/create-unitypackage@master
        with:
          package-path: 'autd3.unitypackage'
          include-files: ./cs/unity/metaList
          project-folder: ./cs/unity
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./autd3.unitypackage
          asset_name: ${{ steps.get_package_name.outputs.result }}
          asset_content_type: application/octet-stream
